ARRAY : 06
33. Search in Rotated Sorted Array


ALGORITHM :
Step-1:   Find the mid value mid = ( left + right) / 2
Step-2:   Check the mid value to the left element arr[mid] >= arr[left]     // Uniformly Increases
Step-3:   Apply binary search on half of the array
Step-4:   If (search) < arr[mid] && (search) >= arr[left]
Step-5:   Then Shift ( right = mid-1 )  Else left = mid+1;
Step-6:   Else ( If (search > arr[mid] && search <=arr[right])
Step-7:  Shift left = mid +1;
Step-8:  Else right = mid-1;
*******************************************************************************/
import java.util.*;
public class Main
{
    public static int searchEle(int[] arr, int search)
    {
        int n = arr.length;
        int left = 0;
        int right = n-1;
        int mid;
        while(left<=right)
        {
            mid = (left+right)/2;
            if (arr[mid]==search)
            {
                return mid;
            }
            else if (arr[mid]>=arr[left])
            {
                if (search<=arr[mid] && search>=arr[left])
                {
                    right = mid-1;
                }
                else{
                    left = mid+1;
                }
            }
            else{
                if (search>arr[mid] && search<=arr[right])
                {
                    left = mid+1;
                }
                else{
                    right = mid+1;
                }
            }   
        }
         return -1;
    }

	public static void main(String[] args) {
	    Scanner sc = new Scanner(System.in);
	    System.out.println("Enter the no of elements: ");
	    int n = sc.nextInt();
	    int[] arr  = new int[n];
	    for (int i=0; i<n; i++)
	    {
	        arr[i] = sc.nextInt();
	    }
	    System.out.println("Enter Element which you want to search : ");
	    int search = sc.nextInt();
	    System.out.println( searchEle(arr, search));
	    
	}
}
